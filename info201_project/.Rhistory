vis3_data <- attack_data %>%
filter(attack_type == input$attack_type) %>%
group_by(year) %>%
summarise(total_casualty = sum(casualty)) %>%
select("year", "total_casualty")
ggplot(data = vis3_data) +
coord_flip() +
geom_bar(mapping = aes(x = year, y = total_casualty),
stat = "identity", fill = "steelblue", alpha = "0.75") +
labs(title = "Casualties by Attack Types from 2000 to 2018",
x = "Year", y = "Total Casualty") +
theme(text = element_text(size=15)) +
scale_x_continuous(breaks = 2000:2018)
})
}
library(httr)
library(jsonlite)
library(shiny)
library(eeptools)
library(leaflet)
source("text.R")
attack_data <- read.csv(
file = "./post_2000_arranged_terriosm_data.csv",
stringsAsFactors = F
)
years <- c(
"2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009",
"2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018"
)
# the list of tab panel on our main page of shiny
page_one <- tabPanel(
titlePanel("Introduction"),
mainPanel(
h1("Project Introduction"),
p(introduction)
)
)
page_two <- tabPanel(
titlePanel("Background"),
mainPanel(
h1("Problem situation"),
p(background),
h1("Research question"),
p(research_questions)
)
)
page_three <- tabPanel(
titlePanel("Visualizations"),
mainPanel(
tabsetPanel(
tabPanel(
"Visualization 1",
sidebarLayout(
sidebarPanel(
selectInput("year_select_1",
label = h3("Select year", style = "color: black"),
choices = years,
selected = "2018"
)
),
mainPanel(
leafletOutput("attack_map")
)
),
sidebarLayout(
sidebarPanel(
selectInput("year_select_2",
label = h3("Select year", style = "color: black"),
choices = years,
selected = "2018"
)
),
mainPanel(
h1("Country map"),
plotOutput("country_map")
)
)
),
tabPanel(
"Visualization 2",
sidebarLayout(
sidebarPanel(
selectInput("year_select_3",
label = h3("Select year", style = "color: black"),
choices = years,
selected = "2018"
),
),
mainPanel(
plotOutput("weapon"),
h1("Analysis"),
p(Vis_2_analysis)
)
)
),
tabPanel(
"Visualization 3",
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "attack_type", # key this value will be assigned to
label = "Attack type", # label to display alongside the slider
choices = attack_data$attack_type,
selected = "Armed Assault"
)
),
mainPanel(
plotOutput("attack_casualty"),
h1("Analysis"),
p(Vis_3_analysis)
)
)
)
)
)
)
page_four <- tabPanel(
titlePanel("Conclusion"),
mainPanel(
h1("Project Conclusion"),
h1("Project implication")
)
)
page_five <- tabPanel(
titlePanel("Tech-Report"),
mainPanel(
h1("Technical Report")
)
)
page_six <- tabPanel(
titlePanel("About Team"),
mainPanel()
)
# ui page
ui <- navbarPage(
"Info 201 Project",
page_one,
page_two,
page_three,
page_four,
page_five,
page_six
)
library(dplyr)
library(shiny)
library(scales)
library(ggplot2)
# This is the server for our project shiny
# The dataset of terroism attack from 2000 to 2018
attack_data <- read.csv(
file = "./post_2000_arranged_terriosm_data.csv",
stringsAsFactors = F
)
# Replace NA values with 0 and mutate to add “casualty” column
attack_data[is.na(attack_data)] <- 0
attack_data <- attack_data %>%
mutate(casualty = number_killed + number_injured)
server <- function(input, output) {
# Visualization 1
output$attack_map <- renderLeaflet({
filtered_data <- attack_data %>%
filter(year == input$year_select_1)
leaflet(data = filtered_data) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(
lat = filtered_data$latitude,
lng = filtered_data$longitude,
color = "red",
popup = paste(
sep = "<br/>",
paste("City: ", filtered_data$city),
paste("Number Killed: ", filtered_data$number_killed),
paste("Number Injured: ", filtered_data$number_injured)
),
radius = sqrt(filtered_data$number_killed) * 2,
stroke = FALSE
)
})
# Visualizaiton # 1a
output$country_map <- renderPlot({
years <- input$year_select_2
# match & filter certain country
re_named_data <- attack_data %>%
mutate(country = recode(country,
`United Kingdom` = "UK", `United States` = "USA", `Bosnia-Herzegovina` = "Bosnia and Herzegovina",
`Republic of the Congo` = "Democratic Republic of the Congo",
`Serbia-Montenegro` = "Serbia", `Slovak Republic` = "Slovakia"
)) %>%
filter(country != "Yugoslavia" &
country != "East Timor" &
country != "West Bank and Gaza Strip" &
country != "St. Lucia" &
country != "International"
)
# arranged data
arranged_data <- re_named_data %>%
mutate(total_victim = number_killed + number_injured) %>%
filter(year == years) %>%
group_by(country) %>%
summarise(total_death = sum(total_victim, na.rm = T))
map.world <- map_data('world')
map.attack <- left_join(map.world, arranged_data, by = c('region' = 'country'))
# plotting
ggplot(map.attack, mapping = aes( x = long, y = lat, group = group )) +
geom_polygon(aes(fill = total_death))
})
# Visualization 2
output$weapon <- renderPlot({
attack_data[is.na(attack_data)] <- 0
attack_data <- attack_data %>%
mutate(casualty = number_killed + number_injured)
filtered_df <- attack_data %>%
select(year, weapon_type, casualty)
selected_year <- filtered_df %>%
filter(year == input$year_select_3)
ggplot(data = selected_year) +
coord_flip() +
geom_bar(mapping = aes(x = weapon_type, y = casualty),
stat = "identity", fill = "gold", alpha = "0.75") +
labs(title = "Casualty vs. Weapon Types from 2000 to 2018",
x = "Weapon Types",
y = "Casualty")
})
#Vis #3
output$attack_casualty <- renderPlot({
vis3_data <- attack_data %>%
filter(attack_type == input$attack_type) %>%
group_by(year) %>%
summarise(total_casualty = sum(casualty)) %>%
select("year", "total_casualty")
ggplot(data = vis3_data) +
coord_flip() +
geom_bar(mapping = aes(x = year, y = total_casualty),
stat = "identity", fill = "steelblue", alpha = "0.75") +
labs(title = "Casualties by Attack Types from 2000 to 2018",
x = "Year", y = "Total Casualty") +
theme(text = element_text(size=15)) +
scale_x_continuous(breaks = 2000:2018)
})
}
runApp('C:/Users/Yichi Zhang/OneDrive - UW/Soporhmre/Q1/info 201/project/info-201-AF4-project/info201_project')
View(attack_data)
attack_data <- read.csv(
file = "./post_2000_arranged_terriosm_data.csv",
stringsAsFactors = F
)
# Replace NA values with 0 and mutate to add “casualty” column
attack_data[is.na(attack_data)] <- 0
attack_data <- attack_data %>%
mutate(casualty = number_killed + number_injured)
setwd("C:/Users/Yichi Zhang/OneDrive - UW/Soporhmre/Q1/info 201/project/info-201-AF4-project/info201_project")
attack from 2000 to 2018
attack_data <- read.csv(
file = "./post_2000_arranged_terriosm_data.csv",
stringsAsFactors = F
)
# Replace NA values with 0 and mutate to add “casualty” column
attack_data[is.na(attack_data)] <- 0
attack_data <- attack_data %>%
mutate(casualty = number_killed + number_injured)
View(attack_data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(attack_data)
runApp()
runApp()
runApp()
#==============
# LOAD PACKAGES
#==============
library(tidyverse)
library(sf)
library(rvest)
library(stringr)
library(scales)
library(dplyr)
library(tidyr)
library(ggplot2)
#library(viridis)
# install.packages("scales")
# The dataset of terroism attack from 2000 to 2018
attack_data <- read.csv(
file = "./post_2000_arranged_terriosm_data.csv",
stringsAsFactors = F
)
# recode conflict country names
country_attack_data <- attack_data
uniques <- unique(attack_data$country)
m1 <- matrix(uniques, ncol=1, byrow=TRUE)
d1 <- as.data.frame(m1, stringsAsFactors=FALSE)
names(d1) <- c("country")
re_named_data <- attack_data %>%
mutate(country = recode(country,
`United Kingdom` = "UK", `United States` = "USA", `Bosnia-Herzegovina` = "Bosnia and Herzegovina",
`Republic of the Congo` = "Democratic Republic of the Congo",
`Serbia-Montenegro` = "Serbia", `Slovak Republic` = "Slovakia"
)) %>%
filter(country != "Yugoslavia" &
country != "East Timor" &
country != "West Bank and Gaza Strip" &
country != "St. Lucia" &
country != "International"
)
# arranged data
arranged_data <- re_named_data %>%
mutate(total_victim = number_killed + number_injured) %>%
filter(year == 2018) %>%
group_by(country) %>%
summarise(total_death = sum(total_victim, na.rm = T))
map.world <- map_data('world')
view(map.world)
new_data <- anti_join(arranged_data, map.world, by = c('country' = 'region'))
view(arranged_data)
map.attack <- left_join(map.world, arranged_data, by = c('region' = 'country'))
message <- paste0("")
ggplot(map.attack, mapping = aes( x = long, y = lat, group = group )) +
geom_polygon(aes(fill = total_death)) +
scale_fill_gradientn(colours = c('#461863','#404E88','#2A8A8C','#7FD157','#F9E53F')
,values = scales::rescale(c(10,50,100,1000,10000))
,labels = comma
,breaks = c(10,50,100,1000,10000)
) +
guides(fill = guide_legend(reverse = T)) +
labs(fill = 'Total Casuality'
,title = 'Terroist attack casuality by Country'
,subtitle = 'Person per country'
,x = NULL
,y = NULL) +
theme(text = element_text(family = 'Gill Sans', color = '#EEEEEE')
,plot.title = element_text(size = 28)
,plot.subtitle = element_text(size = 14)
,axis.ticks = element_blank()
,axis.text = element_blank()
,panel.grid = element_blank()
,panel.background = element_rect(fill = '#333333')
,plot.background = element_rect(fill = '#333333')
,legend.position = c(.18,.36)
,legend.background = element_blank()
,legend.key = element_blank()
)
+
scale_fill_gradientn(colours = c('#461863','#404E88','#2A8A8C','#7FD157','#F9E53F')
,values = scales::rescale(c(10,50,100,1000,10000))
,labels = comma
,breaks = c(10,50,100,1000,10000)
) +
guides(fill = guide_legend(reverse = T)) +
labs(fill = 'Total Casuality'
,title = 'Terroist attack casuality by Country'
,subtitle = 'Person per country'
,x = NULL
,y = NULL) +
theme(text = element_text(family = 'Gill Sans', color = '#EEEEEE')
,plot.title = element_text(size = 28)
,plot.subtitle = element_text(size = 14)
,axis.ticks = element_blank()
,axis.text = element_blank()
,panel.grid = element_blank()
,panel.background = element_rect(fill = '#333333')
,plot.background = element_rect(fill = '#333333')
,legend.position = c(.18,.36)
,legend.background = element_blank()
,legend.key = element_blank()
)
ggplot(map.attack, mapping = aes( x = long, y = lat, group = group )) +
geom_polygon(aes(fill = total_death))
View(attack_data)
#==============
# LOAD PACKAGES
#==============
library(tidyverse)
library(sf)
library(rvest)
library(stringr)
library(scales)
library(dplyr)
library(tidyr)
library(ggplot2)
#library(viridis)
# install.packages("scales")
# The dataset of terroism attack from 2000 to 2018
attack_data <- read.csv(
file = "./post_2000_arranged_terriosm_data.csv",
stringsAsFactors = F
)
# recode conflict country names
country_attack_data <- attack_data
uniques <- unique(attack_data$country)
m1 <- matrix(uniques, ncol=1, byrow=TRUE)
d1 <- as.data.frame(m1, stringsAsFactors=FALSE)
names(d1) <- c("country")
re_named_data <- attack_data %>%
mutate(country = recode(country,
`United Kingdom` = "UK", `United States` = "USA", `Bosnia-Herzegovina` = "Bosnia and Herzegovina",
`Republic of the Congo` = "Democratic Republic of the Congo",
`Serbia-Montenegro` = "Serbia", `Slovak Republic` = "Slovakia"
)) %>%
filter(country != "Yugoslavia" &
country != "East Timor" &
country != "West Bank and Gaza Strip" &
country != "St. Lucia" &
country != "International"
)
# arranged data
arranged_data <- re_named_data %>%
mutate(total_victim = number_killed + number_injured) %>%
filter(year == 2018) %>%
group_by(country) %>%
summarise(total_death = sum(total_victim, na.rm = T))
map.world <- map_data('world')
view(map.world)
new_data <- anti_join(arranged_data, map.world, by = c('country' = 'region'))
view(arranged_data)
map.attack <- left_join(map.world, arranged_data, by = c('region' = 'country'))
message <- paste0("")
ggplot(map.attack, mapping = aes( x = long, y = lat, group = group )) +
geom_polygon(aes(fill = total_death)) +
scale_fill_gradientn(colours = c('#461863','#404E88','#2A8A8C','#7FD157','#F9E53F')
,values = scales::rescale(c(10,50,100,1000,10000))
,labels = comma
,breaks = c(10,50,100,1000,10000)
) +
guides(fill = guide_legend(reverse = T)) +
labs(fill = 'Total Casuality'
,title = 'Terroist attack casuality by Country'
,subtitle = 'Person per country'
,x = NULL
,y = NULL) +
theme(text = element_text(family = 'Gill Sans', color = '#EEEEEE')
,plot.title = element_text(size = 28)
,plot.subtitle = element_text(size = 14)
,axis.ticks = element_blank()
,axis.text = element_blank()
,panel.grid = element_blank()
,panel.background = element_rect(fill = '#333333')
,plot.background = element_rect(fill = '#333333')
,legend.position = c(.18,.36)
,legend.background = element_blank()
,legend.key = element_blank()
)
+
scale_fill_gradientn(colours = c('#461863','#404E88','#2A8A8C','#7FD157','#F9E53F')
,values = scales::rescale(c(10,50,100,1000,10000))
,labels = comma
,breaks = c(10,50,100,1000,10000)
) +
guides(fill = guide_legend(reverse = T)) +
labs(fill = 'Total Casuality'
,title = 'Terroist attack casuality by Country'
,subtitle = 'Person per country'
,x = NULL
,y = NULL) +
theme(text = element_text(family = 'Gill Sans', color = '#EEEEEE')
,plot.title = element_text(size = 28)
,plot.subtitle = element_text(size = 14)
,axis.ticks = element_blank()
,axis.text = element_blank()
,panel.grid = element_blank()
,panel.background = element_rect(fill = '#333333')
,plot.background = element_rect(fill = '#333333')
,legend.position = c(.18,.36)
,legend.background = element_blank()
,legend.key = element_blank()
)
ggplot(map.attack, mapping = aes( x = long, y = lat, group = group )) +
geom_polygon(aes(fill = total_death))
View(attack_data)
runApp()
runApp()
runApp()
runApp()
setwd("C:/Users/Yichi Zhang/OneDrive - UW/Soporhmre/Q1/info 201/project/info-201-AF4-project/info201_project")
styler::style_file("app_ui.R")
runApp()
map.attack <- left_join(map.world, arranged_data, by = c('region' = 'country'))
map.attack <- left_join(map.world, arranged_data, by = c('region' = 'country'))
view(map.attack)
map.attack[is.na(attack_data)] <- 0
map.attack[is.na(map.attack)] <- 0
view(map.attack)
runApp()
shiny::runApp()
runApp()
library(shiny)
library(devtools)
library(tidyr)
library(ggplot2)
library(leaflet)
library(dplyr)
library(rsconnect)
source("app_server.R")
source("app_ui_clover.R")
# Run the application
shinyApp(ui = ui, server = server)
library(dplyr)
library(shiny)
library(scales)
library(ggplot2)
# This is the server for our project shiny
# The dataset of terroism attack from 2000 to 2018
attack_data <- read.csv(
file = "./post_2000_arranged_terriosm_data.csv",
stringsAsFactors = F
)
map.world <- read.csv(
file = "./world_data.csv",
stringsAsFactors = F
)
