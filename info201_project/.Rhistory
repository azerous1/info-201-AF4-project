more_zs <- has_more_zs("ooooooo ia amaing!", "Yichiang love boba")
print(more_zs)
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(strings) {
return (strings <- gsub('[[:digit:]]+', "", strings))
}
v <- c('a20', '22q', '222f')
print(remove_digits(v))
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For exa
has_more_zs <- function(str1, str2) {
num1 <- str_count(tolower(str1), "z")
num2 <- str_count(tolower(str2), "z")
if(num1 < num2) {
return(str2)
} else if (num1 > num2) {
return(str1)
} else if(num1 == 0 & num2 == 0) {
return("Neither string contains the letter z.")
} else {
return("The strings have the same number of Zs.")
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("ooooooo ia amaing!", "Yichiang love boba")
print(more_zs)
movies <- c("Shawshank's redemption", "goal", "Slience lamb", "Horse's whisper", "Whiplash", "Titantic") ### TOO LONG
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
indices <- c(1, 2, 3)
top_three <- movies[indices]
print(top_three)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Shawshank's redemption", "goal","Slience lamb", "Horse's whisper", "Whiplash", "Titantic") ### TOO LONG
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
indices <- c(1, 2, 3)
top_three <- movies[indices]
print(top_three)
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a grea
movies <- c("Shawshank's redemption", "goal","Slience lamb", "Horse's whisper", "Whiplash", "Titantic") ### TOO LONG
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
indices <- c(1, 2, 3)
top_three <- movies[indices]
print(top_three)
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste0(movies, " is a great movie!")
print(excited)
ou should do this by subsetting the vector, not by simply retyping the movies
indices <- c(1, 2, 3)
top_three <- movies[indices]
print(top_three)
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Shawshank's redemption", "goal", "Slience lamb", "Horse's whisper", "Whiplash", "Titantic") ### TOO LONG
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
indices <- c(1, 2, 3)
top_three <- movies[indices]
print(top_three)
excited <- paste0(movies, " is a great movie!")
print(excited)
# Create a vector `without_four` by omitting the fourth element from `movies`
# You should do this using a _negative index_
without_four <- movies[-4]
print(without_four)
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- seq(4, 400, 4)
print(multiples_of_4)
wn to only elements that are divisible by 8.
filter <- c(FALSE, TRUE)
multiples_of_8 <- multiples_of_4[filter]
print(multiples_of_8)
sing the built in `length()` function, create a variable `numbers_len`
# that is equal to the length of your vector `numbers`
numbers_len <- length(numbers)
print(numbers_len)
equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
print(numbers_mean)
lower_numbers <- numbers[numbers < numbers_mean]
# Create a vector `higher_numbers` that the values in your `numbers` vector
# that are higher than `numbers_mean` (again, using vector filtering)
higher_numbers <- numbers[numbers > numbers_mean]
print(higher_numbers)
return(result)
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(nums <- seq(1, 100))
print(summary_1_to_100)
styler:::set_style_transformers()
movies <- c("Shawshank's redemption", "goal", "Slience lamb", "Horse's whisper", "Whiplash", "Titantic") ### TOO LONG
print(movies)
movies <- c("Shawshank's redemption", "dddd", "ddddd") ### TOO LONG
print(movies)
lintr:::addin_lint()
lintr:::addin_lint()
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test_vector <- c("a20", "2223q", "222f")
print(remove_digits(test_vector)
return (input_vector <- gsub('[[:digit:]]+', "", input_vector))
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test_vector <- c("a20", "2223q", "222f")
print(remove_digits(test_vector))
movies <- c("Shawshank's redemption", "goal", "Slience lamb",
"Horse's whisper", "Whiplash", "Titantic") ### TOO LONG
print(movies)
# Create a vector
# spaces between words, and you should a space after a comma)
make_introduction <- function(name, age) {
return(paste("Hello, my name is ", name, ", and I\'m ",
age, " years old", sep = ""))
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction("yichi", 21)
print(my_intro)
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
library("stringr")
library("styler")
library("styler")
style_file("assignment.R")
# (you'll need to install it if you hav
install.packages("styler")
library("stringr")
library("styler")
style_file("assignment.R")
library("stringr")
library("styler")
style_file("C:\Users\Yichi Zhang\OneDrive - UW\Soporhmre\Q1\info 201\a2\a2-azerous1\assignment.R")
library("stringr")
library("styler")
style_file("C:\Users\Yichi Zhang\OneDrive - UW\Soporhmre\Q1\info 201\a2\a2-azerous1\assignment.R")
# Load the the `stringr` package
library("stringr")
library("styler")
style_file("C:\Users\Yichi Zhang\OneDrive - UW\Soporhmre\Q1\info 201\a2\a2-azerous1\assignment.R")
# (you'll need to install it if you haven't used it before)
# It has a variety of functions that make working with string variables easier
# Create a numeric variable `my_age` that is equal to your age
my_age <- 20
# Load the the `stringr` package
library("stringr")
library("styler")
style_file("C:\Users\Yichi Zhang\OneDrive - UW\Soporhmre\Q1\info 201\a2\a2-azerous1\assignment.R")
lintr:::addin_lint()
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test_vector <- c("a20a2", "2223q", "222f")
print(remove_digits(test_vector))
# Vectors -------------------------
# Set up and Defining variables ------------------------------------------------
# Load the the `stringr` package
library("stringr")
style_file("C:\\Users\Yichi Zhang\OneDrive - UW\Soporhmre\Q1\info 201\a2\a2-azerous1\assignment.R")
# (you'll need to install it if you haven't used it before)
# It has a variety of functions that make working with string variables easier
# Create a numeric variable `my_age` that is equal to your age
my_age <- 20
# Load the the `stringr` package
library("stringr")
style_file("C:\\Users\Yichi Zhang\OneDrive - UW\Soporhmre\Q1\info 201\a2\a2-azerous1\assignment.R")
# A2 foundational skills
# Set up and Defining variables ------------------------------------------------
# Load the the `stringr` package
library("stringr")
style_file("C:\Users\Yichi Zhang\OneDrive - UW\Soporhmre\Q1\info 201\a2\a2-azerous1\assignment.R")
# (you'll need to install it if you haven't used it before)
# It has a variety of functions that make working with string variables
# Load the the `stringr` package
library("stringr")
style_file("C:/Users/Yichi Zhang/OneDrive - UW\Soporhmre\Q1\info 201\a2\a2-azerous1\assignment.R")
# (you'll need to install it if you haven't used it before)
# It has a variety of functions that make working with string variables easier
# Create a numeric variable `my_age` that is equal to your age
# Load the the `stringr` package
library("stringr")
style_file("C:/Users/Yichi Zhang/OneDrive - UW\Soporhmre\Q1\info 201\a2\a2-azerous1\assignment.R")
# (you'll need to install it if you haven't used it before)
# It has a variety of functions that make working with string variables easier
# Create a numeric variable `my_age` that is equal to your age
# Load the the `stringr` package
library("stringr")
style_file("C:/Users/Yichi Zhang/OneDrive - UW\Soporhmre\Q1\info 201\a2\a2-azerous1\assignment.R")
# (you'll need to install it if you haven't used it before)
# It has a variety of functions that make working with string variables easier
# Create a numeric variable `my_age` that is equal to your age
# Load the the `stringr` package
library("stringr")
style_file("C:/Users/Yichi Zhang/OneDrive - UW\Soporhmre\Q1\info 201\a2\a2-azerous1\assignment.R")
# (you'll need to install it if you haven't used it before)
# It has a variety of functions that make working with string variables easier
# Create a numeric variable `my_age` that is equal to your age
# Load the the `stringr` package
library("stringr")
style_file("C:/Users/Yichi Zhang/OneDrive - UW/Soporhmre/Q1/info 201/a2/a2-azerous1/assignment.R")
# (you'll need to install it if you haven't used it before)
# It has a variety of functions that make working with string variables easier
# Create a numeric variable `my_age` that is equal to your age
library("stringr")
style_file("C:/Users/Yichi Zhang/OneDrive - UW/Soporhmre/Q1/info 201/a2/a2-azerous1/assignment.R")
# (you'll need to install it if you haven't used it before)
# Load the the `stringr` package
library("stringr")
style_file("C:/Users/Yichi Zhang/OneDrive - UW/Soporhmre/Q1/info 201/a2/a2-azerous1/assignment.R")
lintr:::addin_lint()
styler:::set_style_transformers()
library("stringr")
style_file("C:/Users/Yichi Zhang/OneDrive - UW/Soporhmre/Q1/info 201/a2/a2-azerous1/assignment.R")
library("stringr")
style_file("C:/Users/Yichi Zhang/OneDrive - UW/Soporhmre/Q1/info 201/a2/a2-azerous1/assignment.R")
library("stringr")
style_file("C:/Users/Yichi Zhang/OneDrive - UW/Soporhmre/Q1/info 201/a2/a2-azerous1/assignment.R")
# (you'll need to install it if you haven't used it before)
library("stringr")
style_file("C:/Users/Yichi Zhang/OneDrive - UW/Soporhmre/Q1/info 201/a2/a2-azerous1/assignment.R")
library("stringr")
style_file("C:/Users/Yichi Zhang/OneDrive - UW/Soporhmre/Q1/info 201/a2/a2-azerous1/assignment.R")
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
Florida <- carData::Florida
View(Florida)
num <- nrow(Florida[Florida$GORE > Florida$BUSH,])
print(num)
num <- nrow(Florida[,Florida$GORE > Florida$BUSH])
print(num)
num <- nrow(Florida[,Florida$GORE > Florida$BUSH])
print(num)
install.packages("titantic")
install.packages(titantic)
install.packages(Titanic)
install.packages(Titanic)
titanic_df <- Titanic
titanic_df <- Titanic
View(titanic_df)
children <- Filter(titanic_df, age == "child")
children <- filter(titanic_df, age == "child")
children <- filter(titanic_df, Age == "child")
children <- titanic_df[titanic_df$age == "child"]
mation about the number children on the Titanic.
children <- titanic_df[titanic_df$age == "child"]
children <- titanic_df[titanic_df$age == "child"]
xxx <- titanic_df$age
xxx <- titanic_df$Age
xxx <- titanic_df[["Age"]]
install.packages(dylpr)
install.packages("dylpr")
install.packages("dplyr")
# with information about the number children on the Titanic.
children <- titanic_df[titanic_df$age == "child"]
children <- filter_al
xxx <- titanic_df[["Age"]]
install.packages("dplyr")
library("dplyr")
children <- filter_all(titanic_df, age == "child")
children <- filter(titanic_df, age == "child")
titanic_df <- Titanic
children <- filter(titanic_df, age == "child")
children <- filter_(titanic_df, age == "child")
shiny::runApp('C:/Users/Yichi Zhang/OneDrive - UW/Soporhmre/Q1/info 201/project/info-201-AF4-project/info201_project')
runApp('C:/Users/Yichi Zhang/OneDrive - UW/Soporhmre/Q1/info 201/project/info-201-AF4-project/info201_project')
runApp('C:/Users/Yichi Zhang/OneDrive - UW/Soporhmre/Q1/info 201/project/info-201-AF4-project/info201_project')
shiny::runApp('C:/Users/Yichi Zhang/OneDrive - UW/Soporhmre/Q1/info 201/project/info-201-AF4-project/info201_project')
library(shiny)
library(leaflet)
library(dplyr)
library(leaflet)
attack_data <- read.csv(file = "./data/post_2000_arranged_terriosm_data.csv", stringsAsFactors = F)
page_three <- tabPanel(
titlePanel("Data Visualization"),
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "year", # key this value will be assigned to
label = "Year", # label to display alongside the slider
min = 1998, # minimum slider value
max = 2018, # maximum slider value
value = 1998 # starting value for the slider
)
)
)
)
page_three <- tabPanel(
titlePanel("Data Visualization"),
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "year", # key this value will be assigned to
label = "Year", # label to display alongside the slider
min = 1998, # minimum slider value
max = 2018, # maximum slider value
value = 1998 # starting value for the slider
)
)
)
)
setwd("C:/Users/Yichi Zhang/OneDrive - UW/Soporhmre/Q1/info 201/project/info-201-AF4-project/info201_project")
setwd("C:/Users/Yichi Zhang/OneDrive - UW/Soporhmre/Q1/info 201/project/info-201-AF4-project/info201_project")
attack_data <- read.csv(file = "./data/post_2000_arranged_terriosm_data.csv", stringsAsFactors = F)
attack_data <- read.csv(file = "./data/post_2000_arranged_terriosm_data.csv", stringsAsFactors = F)
attack_data <- read.csv(file = "./data/post_2000_arranged_terriosm_data.csv", stringsAsFactors = F)
attack_data <- read.csv(file = "./data/post_2000_arranged_terriosm_data.csv", stringsAsFactors = F)
attack_data <- read.csv(file = "./data/post_2000_arranged_terriosm_data.csv", stringsAsFactors = F)
attack_data <- read.csv(file = "./data/post_2000_arranged_terriosm_data.csv", stringsAsFactors = F)
runApp()
runApp()
runApp()
runApp()
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(leaflet)
library(dplyr)
# Define UI for application that draws a histogram
attack_data <- read.csv(file = "./data/post_2000_arranged_terriosm_data.csv", stringsAsFactors = F)
page_one <- tabPanel(
titlePanel("Introduction"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
page_two <- tabPanel(
titlePanel("Background")
)
page_three <- tabPanel(
titlePanel("Data Visualization"),
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "year", # key this value will be assigned to
label = "Year", # label to display alongside the slider
min = 2000, # minimum slider value
max = 2018, # maximum slider value
value = 2000 # starting value for the slider
)
),
mainPanel(
leafletOutput("attack_map")
)
)
)
page_four <- tabPanel(
titlePanel("Conclusion")
)
page_five <- tabPanel(
titlePanel("Tech-Report")
)
ui <- navbarPage(
"Info 201 Project",
page_one,
page_two,
page_three,
page_four,
page_five
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
output$attack_map <- renderLeaflet({
filtered_data <- attack_data %>%
filter(year == input$year)
leaflet(data = filtered_data) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(
lat = filtered_data$latitude,
lng = filtered_data$longitude,
color = "red",
radius = sqrt(filtered_data$number_killed) * 2,
stroke = FALSE
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(leaflet)
library(dplyr)
# Define UI for application that draws a histogram
attack_data <- read.csv(file = "./data/post_2000_arranged_terriosm_data.csv", stringsAsFactors = F)
page_one <- tabPanel(
titlePanel("Introduction"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
page_two <- tabPanel(
titlePanel("Background")
)
page_three <- tabPanel(
titlePanel("Data Visualization"),
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "year", # key this value will be assigned to
label = "Year", # label to display alongside the slider
min = 2000, # minimum slider value
max = 2018, # maximum slider value
value = 2000 # starting value for the slider
)
),
mainPanel(
leafletOutput("attack_map")
)
)
)
page_four <- tabPanel(
titlePanel("Conclusion")
)
page_five <- tabPanel(
titlePanel("Tech-Report")
)
ui <- navbarPage(
"Info 201 Project",
page_one,
page_two,
page_three,
page_four,
page_five
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
output$attack_map <- renderLeaflet({
filtered_data <- attack_data %>%
filter(year == input$year)
leaflet(data = filtered_data) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(
lat = filtered_data$latitude,
lng = filtered_data$longitude,
color = "red",
radius = sqrt(filtered_data$number_killed) * 2,
stroke = FALSE
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
